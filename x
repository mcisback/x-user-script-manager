#!/bin/bash

X_DIR_BASENAME=".x"
X_DIR="$HOME/$X_DIR_BASENAME"
X_X_DIR="$X_DIR/.bin"
X="$X_X_DIR/x"
X_SCRIPTS_DIR="$X_DIR/scripts"
X_TEMPLATES_DIR="$X_DIR/templates"
X_TRASH="$X_DIR/trash"
X_BACKUP_DIR="$HOME/Dropbox/X_BACKUP"

X_DEFAULT_TEMPLATE="bash-blank"

# Default Templates
X_BASH_X_TEMPLATE="bash"
read -r -d '' X_BASH_X_TEMPLATE_CONTENT << EOM
#!/bin/bash

cmds=(
"help"
)
alss=(
"h"
)
msgs=(
"Print this help"
)

COUNT=\${#cmds[@]}

abort() {
    echo -e "\$1"
    exit 1
}

print() {
    echo -e "\$1"
}

help() {
    echo -e "\nUsage:\n"
    echo -e "\t\$0 <cmd> [<args>]"

    COUNT=\${#cmds[@]}
    for ((i=0; i<\$COUNT; i++));do
            echo -e "\t\t\${cmds[i]}|\${alss[i]}: \${msgs[i]}"
    done

    echo
}

cmd="\$1"

if [ -z "\$1" ]; then
    
    help

    abort "Exiting..."

fi

shift

# Take command and run script
for ((i=0; i<\$COUNT; i++)); do
        if [ "\$cmd" = "\${cmds[i]}" -o "\$cmd" = "\${alss[i]}" ]; then
                # echo "[+] Running COMMAND \${cmds[i]}|\${alss[i]}"

                \${cmds[i]} "\$@"
                break
        fi
done

EOM

X_BASH_X_BLANK_TEMPLATE="bash-blank"
read -r -d '' X_BASH_X_BLANK_TEMPLATE_CONTENT << EOM
#!/bin/bash
# Bash Script Blank Template Generated By X

echo "Bash Script Blank Template Generated By X"

EOM

X_EDITOR="vim"
X_LS_CMD="tree -a"
# You can use standard cat, more, less or
# highlight, pygmentize for syntax highlighting
X_CAT_CMD="highlight -O ansi"

cmds=(
"run_script"
"create_script"
"create_template"
"rename_script"
"rename_template"
"list_templates"
"list_scripts"
"show_template"
"show_script"
"show_trash"
"edit_script"
"edit_template"
"delete_script"
"delete_template"
"generate_completions"
"install"
"x_reduplicate"
"x_autoedit"
"x_backup"
"print_bashrc_conf"
"install_script_from_url"
"help"
)
alss=(
"r"
"c"
"ct"
"rs"
"rt"
"lt"
"ls"
"t"
"s"
"st"
"e"
"et"
"d"
"dt"
"gc"
"i"
"x"
"ae"
"xb"
"pbc"
"iu"
"h"
)
msgs=(
"Run a X script (arg: <script_name>)"
"Create a X script (args: <script_name> <template>)"
"Create a X template (args: <template_name>, optional: <template_to_copy>)"
"Rename Script (arg: <script_name>)"
"Rename Template (arg: <template_name>)"
"List templates available in $X_DIR"
"List scripts available in $X_DIR"
"Show Template content (arg: <template_name>)"
"Show Script content (arg: <script_name>)"
"Show Trash located in $X_TRASH"
"Edit script, if exists (arg: <script_name>"
"Edit template, if exists (arg: <template_name>)"
"Delete a script by copying it to $X_TRASH (arg: <script_name>)"
"Delete a template by copying it to $X_TRASH (arg: <template_name>)"
"Generate complentions file"
"Install this script (To run just the first time)"
"Duplicate X and copy it  to $X_X_DIR"
"Edit X:$X"
"Backup X Script and copy it to \$X_BACKUP_DIR:$X_BACKUP_DIR"
"Print Lines to add to ~/.bashrc"
"Install script in $X_SCRIPTS_DIR downloading it from URL (arg: url, optional: script_name)"
"Print this help"
)

X_COMPLETIONS_BASE_DIR=".complentions"
X_COMPLETIONS_DIR="$X_DIR/$X_COMPLETIONS_BASE_DIR"
X_COMPLETIONS_FILENAME="comp.bash"
X_COMPLETIONS_SCRIPT="$X_COMPLETIONS_DIR/$X_COMPLETIONS_FILENAME"
read -r -d '' X_COMPLETIONS_SCRIPT_CONTENT << EOM
#!/bin/bash
# Add 'source "\$HOME/$X_COMPLETIONS_BASE_DIR/$X_COMPLETIONS_FILENAME"' in your .bashrc

complete -W "$( ( IFS=$' '; echo "${cmds[*]}" ) )" x

EOM

COUNT=${#cmds[@]}

abort() {
    echo -e "$1"
    exit 1
}

print() {
    echo -e "$1"
}

check_x_ls_cmd() {
    if [ ! -x "$(command -v $X_LS_CMD)" ]; then

        if [ "$1" = "verbose" ]; then
            print "[!] $X_LS_CMD is not installed or in path; fix it"
            print "[!] Now using ls"
        fi

        X_LS_CMD="ls"

    fi
}

install() {

    if [ -d "$X_DIR" ]; then
        abort "$X_DIR already exists; aborting"
    fi

    print "[+] Installing X Script Manager"
    create_x_dir

    if [ ! -d "$X_DIR" ]; then
        abort "Error in creating $X_DIR; create it manually"
    fi

    x_reduplicate
        
    print_bashrc_conf
}

x_autoedit() {
    edit "$X"    
}

x_reduplicate() {
    print "[+] Copying X to $X"
    cp "$(readlink -f $0)" "$X"

    chmod +x "$X"
}

x_backup() {
    
    if [ ! -e "$X_BACKUP_DIR" ]; then
        print "[+] Backup directory $X_BACKUP_DIR doesn't exists; creating it"
        mkdir "$X_BACKUP_DIR"
    fi

    if [ -e "$X_BACKUP_DIR/${X_DIR_BASENAME##\.}" ]; then
        print "[+] $X_BACKUP_DIR/${X_DIR_BASENAME##\.} exists; removing it"
        rm -rd "$X_BACKUP_DIR/${X_DIR_BASENAME##\.}"
    fi

    print "[+] Copying $X_DIR to $X_BACKUP_DIR"
    cp -R "$X_DIR" "$X_BACKUP_DIR"

    print "[+] Moving $X_BACKUP_DIR/$X_DIR_BASENAME to $X_BACKUP_DIR/${X_DIR_BASENAME##\.}"
    mv "$X_BACKUP_DIR/$X_DIR_BASENAME" "$X_BACKUP_DIR/${X_DIR_BASENAME##\.}"

    print "[+] Done"

}

print_bashrc_conf() {
    print "[+] Add this line at the end of your ~/.bashrc"
    print "export PATH=\"\$HOME/${X_X_DIR##$HOME\/}:\$PATH\""
    print "export PATH=\"\$HOME/${X_SCRIPTS_DIR##$HOME\/}:\$PATH\""
    print "source \"\$HOME/$X_COMPLETIONS_BASE_DIR/$X_COMPLETIONS_FILENAME\"\n"
}

create_x_dir() {
    print "[+] $X_DIR doesn't exists; creating it"
    mkdir "$X_DIR"

    print "[+] Creating $X_X_DIR"
    mkdir "$X_X_DIR"

    print "[+] Creating $X_SCRIPTS_DIR"
    mkdir "$X_SCRIPTS_DIR"

    print "[+] Creating $X_TEMPLATES_DIR"
    mkdir "$X_TEMPLATES_DIR"

    print "[+] Creating $X_TRASH"
    mkdir "$X_TRASH"
    
    print "[+] Creating DEFAULT TEMPLATE $X_TEMPLATES_DIR/$X_BASH_X_TEMPLATE"
    touch "$X_TEMPLATES_DIR/$X_BASH_X_TEMPLATE"

    print "[+] Writing $X_BASH_X_TEMPLATE with X_BASH_X_TEMPLATE_CONTENT"
    echo "$X_BASH_X_TEMPLATE_CONTENT" > "$X_TEMPLATES_DIR/$X_BASH_X_TEMPLATE"

    print "[+] Generating BASH BLANK TEMPLATE in $X_BASH_X_BLANK_TEMPLATE"
    echo "$X_BASH_X_BLANK_TEMPLATE_CONTENT" > "$X_TEMPLATES_DIR/$X_BASH_X_BLANK_TEMPLATE"

    generate_completions
}

generate_completions() {
    if [ ! -e "$X_COMPLETIONS_DIR" ]; then
        print "[+] Creating complentions dir $X_COMPLETIONS_DIR"
        mkdir $X_COMPLETIONS_DIR
    else
        print "[+] Completions dir exists; skipping it"
    fi

    print "[+] Generate complentions file $X_COMPLETIONS_SCRIPT as X_COMPLETIONS_SCRIPT_CONTENT"
    echo "$X_COMPLETIONS_SCRIPT_CONTENT" > "$X_COMPLETIONS_SCRIPT"

}

check_if_editor_is_installed() {
    print "[+] Checking if $X_EDITOR is installed!"

    if [ ! -x "$(command -v $X_EDITOR)" ]; then
        abort "[!] $X_EDITOR is not installed or not in PATH; fix it"
    fi
}

run_script() {
    if [ ! -e "$X_SCRIPTS_DIR/$1" ]; then
        abort "[!] Script $1 doesn't exists; exit"
    fi

    # print "[+] Running \"$1\"\n" 

    "$X_SCRIPTS_DIR/$1" "$@"
    
    exit $?
}

create_script() {
    template="$2"
    script="$1"

    if [ -z "$script" ]; then
        abort "[!] script_name arg required"
    fi

    if [ -z "$template" ]; then
        print "[+] Setting template to default template: $X_DEFAULT_TEMPLATE"
        template="$X_DEFAULT_TEMPLATE"
    fi

    if [ ! -e "$X_TEMPLATES_DIR/$template" ]; then
        abort "[!] $template doesn't exists in $X_TEMPLATES_DIR"
    fi

    if [ -e "$X_SCRIPTS_DIR/$script" ]; then
        abort "[!] $X_SCRIPTS_DIR/$script already exists"
    fi

    print "[+] Creating $template script $script in $X_SCRIPTS_DIR"
    cp "$X_TEMPLATES_DIR/$template" "$X_SCRIPTS_DIR/$script"

    print "[+] Setting $script as executable..."
    chmod +x "$X_SCRIPTS_DIR/$script"

    edit_script "$script"
}

create_template() {
    template="$1"
    template_copy="$2"

    if [ -z "$template" ]; then
        abort "[!] template_name arg required"
    fi

    if [ -e "$X_TEMPLATES_DIR/$template" ]; then
        abort "[!] $X_TEMPLATES_DIR/$template already exists\n[*] Run x et $template to edit it"
    fi

    if [ ! -z "$template_copy" ]; then
        print "[+] Copying existing template $template_copy to new template $template"
        cp "$X_TEMPLATES_DIR/$template_copy" "$X_TEMPLATES_DIR/$template"
    else
        print "[+] Creating template $template in $X_TEMPLATES_DIR"
        touch "$X_TEMPLATES_DIR/$template"
    fi

    edit_template "$template"
}

rename_script() {
    script="$1"
    new_name="$2"

    if [ -z "$script" -o -z "$new_name" ]; then
        abort "[!] script_name and new_name required"
    fi

    if [ ! -e "$X_SCRIPTS_DIR/$script" ]; then
        abort "[!] $script doesn't exists"
    fi
    
    print "[+] Moving $X_SCRIPTS_DIR/$script to $X_SCRIPTS_DIR/$new_name"
    mv "$X_SCRIPTS_DIR/$script" "$X_SCRIPTS_DIR/$new_name"

}

rename_template() {
    template="$1"
    new_name="$2"

    if [ -z "$template" -o -z "$new_name" ]; then
        abort "[!] template_name and new_name required"
    fi

    if [ ! -e "$X_TEMPLATES_DIR/$template" ]; then
        abort "[!] $template doesn't exists"
    fi
    
    print "[+] Moving $X_TEMPLATES_DIR/$template to $X_TEMPLATES_DIR/$new_name"
    mv "$X_TEMPLATES_DIR/$template" "$X_TEMPLATES_DIR/$new_name"

}

list_templates() {
    check_x_ls_cmd "verbose"

    print "[+] List all available templates"

    $X_LS_CMD "$X_TEMPLATES_DIR"
}

list_scripts() {
    check_x_ls_cmd "verbose"

    print "[+] List all available scripts"

    $X_LS_CMD "$X_SCRIPTS_DIR"
}

edit() {
    check_if_editor_is_installed

    if [ -z "$1" ]; then
        abort "[!] <script_name> arg required for editing"
    fi
    
    $X_EDITOR "$1"
}

edit_script() {
    script="$X_SCRIPTS_DIR/$1"

    if [ ! -e "$script" ]; then
        abort "[!] $script doesn't exists; create it before"
    fi

    print "[+] Editing $1"

    edit "$script"
}

edit_template() {
    template="$X_TEMPLATES_DIR/$1"

    if [ ! -e "$template" ]; then
        abort "[!] $template doesn't exists; create it before"
    fi

    print "[+] Editing $1"

    edit "$template"
}

delete_script() {
    if [ -z "$1" ]; then
        abort "[!] script_name arg required"
    fi


    script="$X_SCRIPTS_DIR/$1"

    if [ ! -e "$script" ]; then
        abort "[!] $script does not exists"
    fi
    
    print "[+] Removing $script"
    mv "$script" "$X_TRASH/$1"
}

delete_template() {
    if [ -z "$1" ]; then
        abort "[!] template_name arg required"
    fi


    template="$X_TEMPLATES_DIR/$1"

    if [ ! -e "$template" ]; then
        abort "[!] $template does not exists"
    fi
    
    print "[+] Removing $template"
    mv "$template" "$X_TRASH/$1"
}

show_trash() {
    check_x_ls_cmd "verbose"

    $X_LS_CMD $X_TRASH
}

show_template() {
    if [ -z "$1" ]; then
        list_templates
    fi

    if [ ! -e "$X_TEMPLATES_DIR/$1" ]; then
        abort "[+] Template $1 does not exists; exit"
    fi

    $X_CAT_CMD "$X_TEMPLATES_DIR/$1" 
}

show_script() {
    if [ -z "$1" ]; then
        list_scripts
    fi

    if [ ! -e "$X_SCRIPTS_DIR/$1" ]; then
        abort "[+] Script $1 does not exists; exit"
    fi

    $X_CAT_CMD "$X_SCRIPTS_DIR/$1" 
}

check_if_url_is_valid() {
    url="$1"

    if [ -z "$url" ]; then
        abort "[!] Need URL; exiting"
    fi

    curl --output /dev/null --silent --head --fail "$url" && true && return

    false && return
}

download_and_copy() {
    url="$1"
    filename="$2"
    
    [ ! -z "$url" ] || abort "[+] url is required; aborting"
    [ ! -z "$filename" ] || abort "[+] filename is required; aborting"

    [ ! -x "$(command -v curl)" ] && abort "[!] curl is required; aborting"
    
    if ! check_if_url_is_valid "$url"; then
        abort "$url\n\tis not valid; aborting"
    fi

    print "[+] Downloading $url to $filename\n"
    
    curl --progress-bar "$url" -o "$filename" || abort "[!] curl failed; aborting"
}

install_script_from_url() {
    url="$1"
    script_name="$2"

    if [ -z "$script_name" ]; then
        script_name=`basename "$url"`
        print "[+] script_name not set, using $script_name"
    fi

    script_basename=`basename "$url"`

    if [ -x "$X_SCRIPTS_DIR/$script_name" ]; then
        if [ "$script_basename" = "$script_name" ]; then
            print "[+] $script_name already exists; but has the same name as $script_basename; overwriting it"
        else
            abort "[!] $script_name already exists; aborting"
        fi
    fi

    download_and_copy "$url" "$X_SCRIPTS_DIR/$script_name"

    print "\n[+] Setting $X_SCRIPTS_DIR/$script_name as executable"
    chmod +x "$X_SCRIPTS_DIR/$script_name"
}

install_template_from_url() {
    url="$1"
    template_name="$2"

    if [ -z "$template_name" ]; then
        template_name=`basename "$url"`
        print "[+] template_name not set, using $template_name"
    fi

    download_and_copy "$url" "$X_TEMPLATES_DIR/$template_name"

    print "\n[+] Setting $X_TEMPLATES_DIR/$template_name as executable"
    chmod +x "$X_TEMPLATES_DIR/$template_name"
}

help() {
    echo -e "\nUsage:\n"
    echo -e "\t$0 <cmd> [<args>]"

    COUNT=${#cmds[@]}
    for ((i=0; i<$COUNT; i++));do
            echo -e "\t\t${cmds[i]}|${alss[i]}: ${msgs[i]}"
    done

    echo
}

cmd="$1"

if [ -z "$cmd" ]; then
    
    help

    abort "Exiting..."

fi

shift

# cmd_found=False

# Take command and run script
for ((i=0; i<$COUNT; i++)); do
        if [ "$cmd" = "${cmds[i]}" -o "$cmd" = "${alss[i]}" ]; then
                # echo "[+] Running COMMAND ${cmds[i]}|${alss[i]}"
                
                # cmd_found=True

                ${cmds[i]} "$@"

                exit $?
                # break
        fi
done

#if [ "$cmd_found" = "False" ]; then
#    abort "[X] $cmd command not found"
#fi

run_script "$cmd"

